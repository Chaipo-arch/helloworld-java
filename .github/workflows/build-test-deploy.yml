name: Build Test and Deploy

on: 
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main

env:
  PROJECT_VERSION: 1.0.0

jobs:
  # Job 1 : Build le projet
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Vérification et récupération du code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Mise en place du cache Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: "${{ github.workspace }}/.m2/repository"
          key: ${{ runner.os }}-maven-${{hashFiles('**/pom.xml')}}

      # Étape 3 : Configuration du JDK
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Étape 4 : Afficher la version du projet
      - name: Display project version
        run: echo "PROJECT_VERSION=${{ env.PROJECT_VERSION }}"

      # Étape 5 : Construction du projet
      - name: Build project
        env:
          MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/.m2/repository"
        run: mvn clean package -DskipTests

      # Étape 6 : Partage d'artifacts
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: target/*.jar  # Remplacez par le chemin du fichier JAR généré

  # Job 2 : Tests unitaires
  test:
    runs-on: ubuntu-latest
    needs: build # Ce job dépend du build
    steps:
      # Étape 1 : Vérification et récupération du code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Mise en place du cache Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: "${{ github.workspace }}/.m2/repository"
          key: ${{ runner.os }}-maven-${{hashFiles('**/pom.xml')}}

      # Étape 3 : Configuration du JDK
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Étape 4 : Lancer les tests
      - name: Run unit tests
        env:
          MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/.m2/repository"
        run: mvn test


 # Job 3 : Déploiement
  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build
      - test # Dépend des jobs de build et de test
    steps:
      # Étape 1 : Récupération de l'artefact
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output

      # Étape 2 : Simuler le déploiement
      - name: Simulate deployment
        run: echo "Déploiement simulé Artifact récupéré et prêt à déployer."
